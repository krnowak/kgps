#!/usr/bin/perl
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# This Source Code Form is "Incompatible With Secondary Licenses", as
# defined by the Mozilla Public License, v. 2.0.

use strict;
use warnings;
use v5.16;

use File::Path;
use File::Spec;
use IO::File;

use Kgps::DateInc;
use Kgps::GnomePatch;
use Kgps::Options;
use Kgps::StatRenderContext;

sub generate_git_patches {
  my ($p, $output_directory) = @_;
  my $default_data = $p->get_default_data ();
  my $entries = $p->get_raw_diffs ();
  my $patches_count = @{$entries};
  my $date_inc = $default_data->{'date_inc'};

  unless (defined ($date_inc))
  {
    $date_inc = Kgps::DateInc->new_ignore ();
  }

  figure_out_patch_metadata ($entries, $default_data);
  foreach my $entry (@{$entries})
  {
    my $diff = join ('', @{$entry->{'git-diffs'}});
    my $section = $entry->{'section'};
    my $stats = $entry->{'stats'};
    my $section_name = $section->get_name ();
    my $patch_index = $section->get_index () + 1;
    my $number = sprintf ("%04d", $patch_index);
    my $subject = $section->get_subject ();
    my $subject_for_patch_name = $subject;

    chomp ($diff);

    $subject_for_patch_name =~ s/[^\w.]+/-/ag;
    $subject_for_patch_name =~ s/^-+//ag;
    $subject_for_patch_name =~ s/-+$//ag;
    $subject_for_patch_name = substr ($subject_for_patch_name, 0, 52);

    my $patch_name = "$number-$subject_for_patch_name.patch";
    my $patch_file = File::Spec->catfile ($output_directory, $patch_name);
    my $file = IO::File->new ($patch_file, 'w');

    unless (defined ($file))
    {
      die "Could not open '$patch_file' for writing.";
    }

    my $from_date = $default_data->{'from_date'};
    my $author = $section->get_author ();
    my $patch_date = $section->get_date ();
    my $message_lines = $section->get_message_lines ();
    my $stat_render_context = Kgps::StatRenderContext->new ();
    my $per_basename_stats = $stats->get_per_basename_stats ();
    my $summary = $stats->get_summary ();
    my $listing_aux_changes = $stats->get_aux_changes ();

    $per_basename_stats->fill_context_info ($stat_render_context);

    my $patch_date_str = $patch_date->to_string ();
    my $contents = join ("\n",
                         "From 1111111111111111111111111111111111111111 $from_date",
                         "From: $author",
                         "Date: $patch_date_str",
                         "Subject: [PATCH $patch_index/$patches_count] $subject",
                         '',
                         @{$message_lines},
                         '---',
                         $per_basename_stats->to_lines ($stat_render_context),
                         $summary->to_string (),
                         $listing_aux_changes->to_lines (),
                         '',
                         $diff,
                         '-- ',
                         '0.0.0',
                         '',
                         '');

    $file->binmode (':utf8');
    $file->print ($contents);
  }
  return;
}

sub figure_out_patch_metadata
{
  my ($entries, $default_data) = @_;
  my $date_inc = $default_data->{'date_inc'};

  unless (defined ($date_inc))
  {
    $date_inc = Kgps::DateInc->new_ignore ();
  }

  my $mode = $date_inc->get_mode ();

  if ($mode == Kgps::DateInc::Ignore)
  {
    my $current_patch_date = $default_data->{'patch_date'};

    unless (defined ($current_patch_date))
    {
      die "SHOULD NOT HAPPEN, no patch date";
    }
    foreach my $entry (@{$entries})
    {
      my $section = $entry->{'section'};
      my $section_date = $section->get_date ();

      if (defined ($section_date))
      {
        $current_patch_date = $section_date;
      }
      else
      {
        $section->set_date ($current_patch_date);
      }
    }
  }
  elsif ($mode == Kgps::DateInc::From)
  {
    my $current_patch_date = undef;

    foreach my $entry (@{$entries})
    {
      my $section = $entry->{'section'};
      my $section_date = $section->get_date ();

      if (defined ($section_date))
      {
        $current_patch_date = $section_date;
      }
      else
      {
        if (defined ($current_patch_date))
        {
          $current_patch_date = $current_patch_date->incremented ($date_inc);
        }
        else
        {
          $current_patch_date = $default_data->{'patch_date'};
          unless (defined ($current_patch_date))
          {
            die "SHOULD NOT HAPPEN, no patch date";
          }
        }
        $section->set_date ($current_patch_date);
      }
    }
  }
  elsif ($mode == Kgps::DateInc::Upto)
  {
    my $current_patch_date = undef;

    foreach my $entry (reverse (@{$entries}))
    {
      my $section = $entry->{'section'};
      my $section_date = $section->get_date ();

      if (defined ($section_date))
      {
        $current_patch_date = $section_date;
      }
      else
      {
        if (defined ($current_patch_date))
        {
          $current_patch_date = $current_patch_date->decremented ($date_inc);
        }
        else
        {
          $current_patch_date = $default_data->{'patch_date'};
          unless (defined ($current_patch_date))
          {
            die "SHOULD NOT HAPPEN, no patch date";
          }
        }
        $section->set_date ($current_patch_date);
      }
    }
  }

  foreach my $entry (@{$entries})
  {
    my $section = $entry->{'section'};
    my $section_name = $section->get_name ();

    unless (defined ($section->get_subject ()))
    {
      my $subject = $default_data->{'subject'};

      unless (defined ($subject))
      {
        die "no subject for section $section_name";
      }
      $section->set_subject ($subject);
    }

    unless (defined ($section->get_author ()))
    {
      my $author = $default_data->{'author'};

      unless (defined ($author))
      {
        die "no author for section $section_name";
      }
      $section->set_author ($author);
    }

    unless (defined ($section->get_message_lines ()))
    {
      # This is never undef, it can be just an empty arrayref.
      $section->set_message_lines ($default_data->{'message'});
    }
  }

  return;
}

my $output_directory = '.';

Kgps::Options::get({'output-directory|o=s' => \$output_directory}, \@ARGV);

if (scalar (@ARGV) == 0)
{
  say "No path to annotated git patch given";
  die;
}
if (scalar (@ARGV) > 1)
{
  say "Too many paths passed";
  die;
}

my $input_patch = $ARGV[0];

my $mp_error;
File::Path::make_path($output_directory, {'error' => \$mp_error});
if ($mp_error && @{$mp_error})
{
  for my $diag (@{$mp_error})
  {
    my ($dir, $msg) = %{$diag};
    if ($dir eq '')
    {
      say "General error: $msg";
    }
    else
    {
      say "Problem creating directory $dir: $msg";
    }
  }
  die;
}

my $p = Kgps::GnomePatch->new ();

$p->process ($input_patch);
generate_git_patches ($p, $output_directory);
